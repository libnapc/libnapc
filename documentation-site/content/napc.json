{
    "definitions": {
        "napc_version": {
            "type": "fn",
            "return": {
                "type": "const char *",
                "description": ""
            },
            "params": [],
            "flags": [],
            "general_info": {
                "version": "1.2.0",
                "changelog": [
                    {
                        "version": "1.2.0",
                        "date": "20.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get the version of libnapc.",
                "description": "Returns the version of the current libnapc implementation.",
                "example": "napc_printf(\"Using libnapc version: %s\\n\", napc_version());"
            }
        },
        "napc_getFullVersion": {
            "type": "fn",
            "return": {
                "type": "const char *",
                "description": ""
            },
            "params": [],
            "flags": [],
            "general_info": {
                "version": "1.3.0",
                "changelog": [
                    {
                        "version": "1.3.0",
                        "date": "21.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get the full version of libnapc.",
                "description": "Returns the full version of the current libnapc implementation.",
                "example": "napc_printf(\"Using libnapc version: %s\\n\", napc_getFullVersion());"
            }
        },
        "napc_puts": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "str",
                    "description": "The string to be printed."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Print a string to console\/serial.",
                "description": "Output a string via console or serial.",
                "example": "napc_puts(\"Hello World!\");"
            }
        },
        "napc_putc": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "char",
                    "name": "ch",
                    "description": "The character to be printed."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Print a character to console\/serial.",
                "description": "Output a single character via console or serial.",
                "example": "napc_putc('H');\nnapc_putc('e');\nnapc_putc('l');\nnapc_putc('l');\nnapc_putc('o');\nnapc_putc('!');"
            }
        },
        "napc_printf": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "...",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Print a printf()-like formatted string.",
                "description": "Provides a convient way to print out information without having the need to call `snprintf()` first.",
                "example": "int my_var = 13;\n\nnapc_printf(\"Value of my_var is %d\", my_var);"
            }
        },
        "napc_mute": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Disable console\/serial output.",
                "description": "Temporarily disable output of `napc_puts`, `napc_putc` and `napc_printf`.",
                "rationale": "When running unit tests we are not particularly interested in the output\nthe code generated. We much rather have a single output that says\ntest passed or failed.",
                "example": "napc_printf(\"Hello\"); \/\/ prints Hello\n\nnapc_mute();\n\nnapc_printf(\" World!\"); \/\/ this will not be printed\n\nnapc_unmute();\n\nnapc_printf(\" Earth!\"); \/\/ prints Earth!"
            }
        },
        "napc_unmute": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Enable console\/serial output.",
                "description": "Re-enable output of `napc_puts`, `napc_putc` and `napc_printf` after a call to `napc_mute`.",
                "example": "napc_printf(\"Hello\"); \/\/ prints Hello\n\nnapc_mute();\n\nnapc_printf(\" World!\"); \/\/ this will not be printed\n\nnapc_unmute();\n\nnapc_printf(\" Earth!\"); \/\/ prints Earth!"
            }
        },
        "napc_getTimeSinceBoot": {
            "type": "fn",
            "return": {
                "type": "napc_time",
                "description": ""
            },
            "params": [],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get time since boot.",
                "description": "Returns the number of milliseconds that have passed since boot.",
                "warning": "The value returned by this function will overflow at some point in time."
            }
        },
        "napc_delay": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc_time",
                    "name": "amount",
                    "description": "The amount in milliseconds."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Delay program execution.",
                "description": "Delay program execution.",
                "example": "napc_printf(\"Hello \");\n\nnapc_delay(1000); \/\/ wait for 1 second\n\nnapc_printf(\"World!\");"
            }
        },
        "napc_delayUs": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc_time",
                    "name": "amount",
                    "description": "The amount in microseconds."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Delay program execution.",
                "description": "Delay program execution.",
                "example": "napc_printf(\"Hello \");\n\nnapc_delayUs(250000); \/\/ wait for 250 milliseconds\n\nnapc_printf(\"World!\");"
            }
        },
        "napc_snprintf": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "char *",
                    "name": "buffer",
                    "description": "The buffer to write the formatted string to."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "The size of the buffer."
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "...",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Format printf()-like string.",
                "rationale": "The `snprintf()` function defined by the C-Standard does not guarantee that the resulting string is NUL-terminated.\nThis function ensures the resulting string is always NUL-terminated.",
                "example": "char buffer[512];\n\nnapc_snprintf(buffer, sizeof(buffer), \"Hello %s!\", \"World!\");\n\n\/\/ buffer now contains 'Hello World!'"
            }
        },
        "napc_vsnprintf": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "char *",
                    "name": "buffer",
                    "description": "The buffer to write the formatted string to."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "The size of the buffer."
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "va_list",
                    "name": "args",
                    "description": ""
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Format printf()-like string.",
                "description": "Same as `napc_snprintf()` except it takes a `va_args` list instead of variadic arguments."
            }
        },
        "napc_strncpy": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "char *",
                    "name": "dest",
                    "description": "Destination memory location."
                },
                {
                    "type": "const char *",
                    "name": "source",
                    "description": "String to be copied to dest."
                },
                {
                    "type": "napc_size",
                    "name": "dest_size",
                    "description": "Size of destination."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Copy a string.",
                "description": "Copy a string to another location.",
                "rationale": "The `strncpy()` function defined by the C-Standard does not guarantee that the resulting string is NUL-terminated.\nThis function ensures the resulting string is always NUL-terminated."
            }
        },
        "napc_strlen": {
            "type": "fn",
            "return": {
                "type": "napc_size",
                "description": "Returns the length of the string."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "str",
                    "description": "The string to be measured."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get length of string.",
                "description": "Count the number of characters in a string.",
                "notes": "This is just an alias for `strlen()`.",
                "example": "napc_size str_length = napc_strlen(\"Hello World!\");\n\nnapc_printf(\"String's length is %\" NAPC_SIZE_PRINTF \"\\n\", str_length);"
            }
        },
        "napc_streql": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if `str1` and `str2` are equal in contents."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "str1",
                    "description": "First string."
                },
                {
                    "type": "const char *",
                    "name": "str2",
                    "description": "Second string."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Compare two strings.",
                "description": "Perform case sensitive string comparsion.",
                "rationale": "It's cumbersome to write `strcmp(str1, str2) == 0` to compare strings.",
                "example": "napc_streql(\"my_string\", \"my_string\"); \/\/ returns true\n\nnapc_streql(\"my_string\", \"mY_sTring\"); \/\/ returns false\n\nnapc_streql(\"my_string\", \"my_second_string\"); \/\/ returns false"
            }
        },
        "napc_streqli": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if `str1` and `str2` are equal in contents."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "str1",
                    "description": "First string."
                },
                {
                    "type": "const char *",
                    "name": "str2",
                    "description": "Second string."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Compare two strings.",
                "description": "Perform case insensitive string comparsion.",
                "rationale": "It's cumbersome to write `strcasecmp(str1, str2) == 0` to compare strings.",
                "example": "napc_streqli(\"my_string\", \"mY_sTring\"); \/\/ returns true\n\nnapc_streqli(\"my_string\", \"my_second_string\"); \/\/ returns false"
            }
        },
        "napc_memeql": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if `data1` and `data2` have the same content."
            },
            "params": [
                {
                    "type": "const void *",
                    "name": "data1",
                    "description": "Pointer to first memory location."
                },
                {
                    "type": "const void *",
                    "name": "data2",
                    "description": "Pointer to second memory location."
                },
                {
                    "type": "napc_size",
                    "name": "data_size",
                    "description": "Size of `data1` and `data2` in bytes."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Compare two memory regions.",
                "description": "Compare two memory regions.",
                "notes": "The two memory regions need to be of the same size.",
                "rationale": "It's cumbersome to write `memcmp(data1, data2, data_size) == 0` to compare memory blocks.",
                "example": "char data1[3] = {0, 0, 7};\nchar data2[3] = {0, 0, 7};\n\nif (napc_memeql(data1, data2, 3)) {\n    napc_printf(\"data1 and data2 have the same content\");\n}"
            }
        },
        "napc_mzero": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "void *",
                    "name": "data",
                    "description": "Buffer to be zero'd out."
                },
                {
                    "type": "napc_size",
                    "name": "data_size",
                    "description": "Size of `data` buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Zero out memory region.",
                "description": "Clear memory section.",
                "rationale": "It's cumbersome to write `memset(data, 0, data_size)`.",
                "example": "char buffer[512];\n\n\/\/ clear data buffer\nnapc_mzero(buffer, sizeof(buffer));"
            }
        },
        "napc_halt": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "file",
                    "description": ""
                },
                {
                    "type": "int",
                    "name": "file_line",
                    "description": ""
                },
                {
                    "type": "const char *",
                    "name": "fn",
                    "description": ""
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": ""
                },
                {
                    "type": "...",
                    "name": "...",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_setup": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "platform",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_loop": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": ""
            },
            "params": [
                {
                    "type": "napc_time",
                    "name": "uptime",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_getUptime": {
            "type": "fn",
            "return": {
                "type": "napc_time",
                "description": "Returns the number of seconds that have passed since boot."
            },
            "params": [],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get uptime in seconds.",
                "description": "Get the uptime in seconds.",
                "example": "napc_time uptime = napc_getUptime();\n\nnapc_printf(\"I'm up since %\" NAPC_TIME_PRINTF \" seconds\", uptime);"
            }
        },
        "napc_getFreeMemory": {
            "type": "fn",
            "return": {
                "type": "napc_size",
                "description": ""
            },
            "params": [],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get free memory.",
                "description": "Returns the number of free bytes (on the stack) available."
            }
        },
        "napc_logMessage": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "subsys",
                    "description": ""
                },
                {
                    "type": "int",
                    "name": "level",
                    "description": ""
                },
                {
                    "type": "const char *",
                    "name": "function",
                    "description": ""
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": ""
                },
                {
                    "type": "...",
                    "name": "...",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_logLevelToString": {
            "type": "fn",
            "return": {
                "type": "const char *",
                "description": ""
            },
            "params": [
                {
                    "type": "int",
                    "name": "log_level",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_getRandomBitSources": {
            "type": "fn",
            "return": {
                "type": "const int *",
                "description": "Returns a list of integers that can be passed as a second parameter to `napc_getRandomBit`."
            },
            "params": [],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get source ids for randomness.",
                "description": "Returns a list of all available sources of randomness.\nThe end of the list is indicated with `-1` (which is not a valid source identifier).",
                "notes": "Since this function is hardware dependent, its output also is dependent on the target hardware.",
                "example": "const int *sources = napc_getRandomBitSources();\n\nfor (int i = 0; sources[i] >= 0; ++i) {\n    napc_printf(\"Source identifier %d\\n\", sources[i]);\n}"
            }
        },
        "napc_getRandomBit": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if `out` contains a new randomly generated bit."
            },
            "params": [
                {
                    "type": "bool *",
                    "name": "out",
                    "description": "Location to put random bit into."
                },
                {
                    "type": "int",
                    "name": "source",
                    "description": "Source to get the randomness from. See `napc_getRandomBitSources`."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Create a random bit value.",
                "description": "Creates a random bit value (true or false).",
                "warning": [
                    "It's not advised to call this function directly, use `napc_getRandomByte` for generating a random byte instead.",
                    "`out` remains UNMODIFIED if function returned `false`."
                ],
                "example": "napc_u8 out;\n\nif (napc_getRandomBit(&out)) {\n    \/\/ do something with `out`\n}"
            }
        },
        "napc_getRandomByte": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if `out` contains a new randomly generated byte."
            },
            "params": [
                {
                    "type": "napc_u8 *",
                    "name": "out",
                    "description": "Location to put random byte into."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Create a random byte.",
                "description": "Create a random byte.",
                "warning": "`out` remains UNMODIFIED if function returned `false`.",
                "example": "napc_u8 out;\n\nif (napc_getRandomByte(&out)) {\n    \/\/ do something with `out`\n}"
            }
        },
        "napc_Pool_init": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Pool *",
                    "name": "pool",
                    "description": "Pointer to the instance."
                },
                {
                    "type": "const char *",
                    "name": "pool_label",
                    "description": "Label for pool. (must be a constant)"
                },
                {
                    "type": "void *",
                    "name": "array_start",
                    "description": "Start address of array (to be used by the pool)"
                },
                {
                    "type": "napc_size",
                    "name": "num_elements",
                    "description": "Number of elements in array."
                },
                {
                    "type": "napc_size",
                    "name": "element_size",
                    "description": "Size (in bytes) of a single element in the array."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Initialize a static pool.",
                "description": "Initializes a static (fixed sized) pool.",
                "example": "int buffer[5];\nnapc_Pool pool;\n\nnapc_Pool_init(&pool, \"int pool\", buffer, 5, sizeof(int));\n\nnapc_ssize id = napc_Pool_allocate(&pool);\n\nint *first_element = napc_Pool_getAddress(&pool, id);"
            }
        },
        "napc_Pool_claimElement": {
            "type": "fn",
            "return": {
                "type": "napc_ssize",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Pool *",
                    "name": "pool",
                    "description": "Pointer to napc__Pool instance."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.1",
                "changelog": [
                    {
                        "version": "1.0.1",
                        "date": "17.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Claim an element of a pool.",
                "description": "Allocates an element from the pool `pool`.",
                "warning": "If the pool is exhausted program execution is halted."
            }
        },
        "napc_Pool_allocate": {
            "type": "fn",
            "return": {
                "type": "napc_ssize",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Pool *",
                    "name": "pool",
                    "description": "Pointer to napc__Pool instance."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.1",
                "deprecated": true,
                "deprecated_replacement": "napc_Pool_claimElement",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    },
                    {
                        "version": "1.0.1",
                        "date": "17.03.2022",
                        "change": "added deprecation warning"
                    }
                ],
                "brief": "Allocate an element of a pool.",
                "description": "Allocates an element from the pool `pool`.",
                "warning": "If the pool is exhausted program execution is halted."
            }
        },
        "napc_Pool_isClaimed": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": ""
            },
            "params": [
                {
                    "type": "const napc__Pool *",
                    "name": "pool",
                    "description": "Pointer to napc__Pool instance."
                },
                {
                    "type": "napc_size",
                    "name": "element_index",
                    "description": "Index of element to check."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.1",
                "changelog": [
                    {
                        "version": "1.0.1",
                        "date": "17.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Check if element is claimed.",
                "description": "Checks if a particular element is allocated (in use) or not."
            }
        },
        "napc_Pool_isAllocated": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": ""
            },
            "params": [
                {
                    "type": "const napc__Pool *",
                    "name": "pool",
                    "description": "Pointer to napc__Pool instance."
                },
                {
                    "type": "napc_size",
                    "name": "element_index",
                    "description": "Index of element to check."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.1",
                "deprecated": true,
                "deprecated_replacement": "napc_Pool_isClaimed",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    },
                    {
                        "version": "1.0.1",
                        "date": "17.03.2022",
                        "change": "added deprecation warning"
                    }
                ],
                "brief": "Check if element is allocated.",
                "description": "Checks if a particular element is allocated (in use) or not."
            }
        },
        "napc_Pool_getAvailable": {
            "type": "fn",
            "return": {
                "type": "napc_size",
                "description": "Returns the number of available elements in the pool."
            },
            "params": [
                {
                    "type": "const napc__Pool *",
                    "name": "pool",
                    "description": "Pointer to napc__Pool instance."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get available elements.",
                "description": "Get the number of available elements in the pool."
            }
        },
        "napc_Pool_getAddress": {
            "type": "fn",
            "return": {
                "type": "void *",
                "description": "The element's address."
            },
            "params": [
                {
                    "type": "const napc__Pool *",
                    "name": "pool",
                    "description": "Pointer to napc__Pool instance."
                },
                {
                    "type": "napc_size",
                    "name": "element_index",
                    "description": "Index of element."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get address of an element.",
                "description": "Gets the address of an allocated element in the pool.",
                "warning": "This function can only be used to get the address of allocated elements in the pool.",
                "example": "int buffer[5];\nnapc_Pool pool;\n\nnapc_Pool_init(&pool, \"int pool\", buffer, 5, sizeof(int));\n\nnapc_ssize id = napc_Pool_allocate(&pool);\n\nint *first_element = napc_Pool_getAddress(&pool, id);"
            }
        },
        "napc_Pool_releaseElement": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Pool *",
                    "name": "pool",
                    "description": "Pointer to napc__Pool instance."
                },
                {
                    "type": "napc_size",
                    "name": "element_index",
                    "description": "Index of element."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.1",
                        "date": "17.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Release an element.",
                "description": "Releases an element from the pool."
            }
        },
        "napc_Pool_release": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Pool *",
                    "name": "pool",
                    "description": "Pointer to napc__Pool instance."
                },
                {
                    "type": "napc_size",
                    "name": "element_index",
                    "description": "Index of element."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.1",
                "deprecated": true,
                "deprecated_replacement": "napc_Pool_releaseElement",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    },
                    {
                        "version": "1.0.1",
                        "date": "17.03.2022",
                        "change": "added deprecation warning"
                    }
                ],
                "brief": "Release an element.",
                "description": "Releases an element from the pool."
            }
        },
        "napc_OSTimer_init": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__OSTimer *",
                    "name": "timer",
                    "description": "One shot timer to be initialized."
                },
                {
                    "type": "napc_time",
                    "name": "duration",
                    "description": "Timer duration in milliseconds."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Initialize a timer.",
                "description": "Initializes a timer with a duration of `duration` milliseconds.",
                "example": "napc__OSTimer timer;\n\nnapc_OSTimer_init(&timer, 1000); \/\/ 1000ms = 1s"
            }
        },
        "napc_OSTimer_create": {
            "type": "fn",
            "return": {
                "type": "napc__OSTimer",
                "description": ""
            },
            "params": [
                {
                    "type": "napc_time",
                    "name": "duration",
                    "description": "Timer duration in milliseconds."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Create a timer object.",
                "description": "Creates a timer with a duration of `duration` milliseconds.",
                "example": "napc__OSTimer timer = napc_OSTimer_create(1000); \/\/ 1000ms = 1s"
            }
        },
        "napc_OSTimer_start": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__OSTimer *",
                    "name": "timer",
                    "description": "Timer to start."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Start a single shot timer.",
                "description": "Starts the single shot timer `timer`.",
                "example": "napc__OSTimer timer = napc_OSTimer_create(1000);\n\nnapc_OSTimer_start(&timer);"
            }
        },
        "napc_OSTimer_expired": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if timer expired, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__OSTimer *",
                    "name": "timer",
                    "description": "Timer to check."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Check if a timer has expired.",
                "notes": "This function will return `true` only once per started timer.\nSubsequent calls on the same timer will return `false`."
            }
        },
        "napc_OSTimer_restart": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__OSTimer *",
                    "name": "timer",
                    "description": "Timer to be restarted."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Restart a timer.",
                "example": "if (napc_OSTimer_expired(&timer)) {\n    napc_OSTimer_restart(&timer);\n}"
            }
        },
        "napc_Timer_init": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Timer *",
                    "name": "timer",
                    "description": "Timer to be initialized."
                },
                {
                    "type": "napc_time",
                    "name": "duration",
                    "description": "Timer duration in milliseconds."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Initialize a timer.",
                "description": "Initializes a timer with a duration of `duration` milliseconds.",
                "example": "napc__Timer timer;\n\nnapc_Timer_init(&timer, 1000); \/\/ 1000ms = 1s"
            }
        },
        "napc_Timer_create": {
            "type": "fn",
            "return": {
                "type": "napc__Timer",
                "description": ""
            },
            "params": [
                {
                    "type": "napc_time",
                    "name": "duration",
                    "description": "Timer duration in milliseconds."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Create a timer object.",
                "description": "Creates a timer with a duration of `duration` milliseconds.",
                "example": "napc__Timer timer = napc_Timer_create(1000); \/\/ 1000ms = 1s"
            }
        },
        "napc_Timer_start": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Timer *",
                    "name": "timer",
                    "description": "Timer to start."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Start a timer.",
                "description": "Starts the timer `timer`.",
                "example": "napc__Timer timer = napc_Timer_create(1000);\n\nnapc_Timer_start(&timer);"
            }
        },
        "napc_Timer_expired": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if timer expired, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__Timer *",
                    "name": "timer",
                    "description": "Timer to check."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Check if a timer has expired.",
                "notes": "After the timer expired this function will always return `true`\nuntil timer is restarted with `napc_Timer_restart`."
            }
        },
        "napc_Timer_restart": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Timer *",
                    "name": "timer",
                    "description": "Timer to be restarted."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Restart a timer.",
                "example": "if (napc_Timer_expired(&timer)) {\n    napc_Timer_restart(&timer);\n}"
            }
        },
        "napc_random_collectBytes": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Collect random bits from various sources.",
                "notes": "This function must be called periodically for `napc_random_getRandomBytes` to work."
            }
        },
        "napc_random_getAvailableBytes": {
            "type": "fn",
            "return": {
                "type": "napc_size",
                "description": "Returns the number of available random bytes."
            },
            "params": [],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get number of available random bytes.",
                "description": "Get number of immediately available random bytes."
            }
        },
        "napc_random_getRandomBytes": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if array `out` was filled with `n_bytes` bytes of random data."
            },
            "params": [
                {
                    "type": "napc_size",
                    "name": "n_bytes",
                    "description": "Number of bytes to be generated."
                },
                {
                    "type": "napc_u8 *",
                    "name": "out",
                    "description": "Array to store collected bytes."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Create random bytes.",
                "description": "Creates `n_bytes` random bytes.",
                "notes": "`napc_random_collectBytes` must be called periodically for this function to work.",
                "warning": "`out` remains UNMODIFIED if function returned `false`.",
                "example": "napc_u8 random_bytes[32];\n\nif (napc_random_getRandomBytes(random_bytes, sizeof(random_bytes))) {\n    \/\/ random_bytes now contains 32 random bytes\n}"
            }
        },
        "napc_random_getRandomBytesSync": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc_size",
                    "name": "n_bytes",
                    "description": "Number of bytes to be generated."
                },
                {
                    "type": "napc_u8 *",
                    "name": "out",
                    "description": "Array to store collected bytes."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.5.0",
                "changelog": [
                    {
                        "version": "1.5.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Create random bytes.",
                "description": "Creates `n_bytes` random bytes.",
                "warning": "Since this function blocks until enough random data is collected, it is better to use `napc_random_getRandomBytes`.",
                "example": "napc_u8 random_bytes[32];\n\nnapc_random_getRandomBytesSync(random_bytes, sizeof(random_bytes));\n\n\/\/ random_bytes now contains 32 random bytes"
            }
        },
        "napc_parser_parseDecimalNumberU8": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "String to be parsed."
                },
                {
                    "type": "napc_u8 *",
                    "name": "out",
                    "description": "Pointer to store the parsed number. (optional)"
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a hexadecimal number from string.",
                "description": "Parse a string containing a decimal number.",
                "example": "napc_u8 out;\n\nif (napc_parser_parseDecimalNumberU8(\"123\", &out)) {\n    napc_printf(\"Value is %d\", out); \/\/ \"Value is 123\"\n}"
            }
        },
        "napc_parser_parseDecimalNumberU16": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "String to be parsed."
                },
                {
                    "type": "napc_u16 *",
                    "name": "out",
                    "description": "Pointer to store the parsed number. (optional)"
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a hexadecimal number from string.",
                "description": "Parse a string containing a decimal number.",
                "example": "napc_u16 out;\n\nif (napc_parser_parseDecimalNumberU16(\"1024\", &out)) {\n    napc_printf(\"Value is %d\", out); \/\/ \"Value is 1024\"\n}"
            }
        },
        "napc_parser_parseDecimalNumberU32": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "String to be parsed."
                },
                {
                    "type": "napc_u32 *",
                    "name": "out",
                    "description": "Pointer to store the parsed number. (optional)"
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a hexadecimal number from string.",
                "description": "Parse a string containing a decimal number.",
                "example": "napc_u32 out;\n\nif (napc_parser_parseDecimalNumberU32(\"123456\", &out)) {\n    napc_printf(\"Value is %ld\", out); \/\/ \"Value is 123456\"\n}"
            }
        },
        "napc_parser_parseHexadecimalNumberU8": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "String to be parsed."
                },
                {
                    "type": "napc_u8 *",
                    "name": "out",
                    "description": "Pointer to store the parsed number. (optional)"
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a decimal number from string.",
                "description": "Parse a string containing a hexadecimal number.",
                "example": "napc_u8 out;\n\nif (napc_parser_parseHexadecimalNumberU8(\"ef\", &out)) {\n    napc_printf(\"Value is %ld\", out); \/\/ \"Value is 239\"\n}"
            }
        },
        "napc_parser_parseHexadecimalNumberU16": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "String to be parsed."
                },
                {
                    "type": "napc_u16 *",
                    "name": "out",
                    "description": "Pointer to store the parsed number. (optional)"
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a decimal number from string.",
                "description": "Parse a string containing a hexadecimal number.",
                "example": "napc_u16 out;\n\nif (napc_parser_parseHexadecimalNumberU16(\"beef\", &out)) {\n    napc_printf(\"Value is %ld\", out); \/\/ \"Value is 48879\"\n}"
            }
        },
        "napc_parser_parseHexadecimalNumberU32": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "String to be parsed."
                },
                {
                    "type": "napc_u32 *",
                    "name": "out",
                    "description": "Pointer to store the parsed number. (optional)"
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a decimal number from string.",
                "description": "Parse a string containing a hexadecimal number.",
                "example": "napc_u32 out;\n\nif (napc_parser_parseHexadecimalNumberU32(\"deadbeef\", &out)) {\n    napc_printf(\"Value is %ld\", out); \/\/ \"Value is 3735928559\"\n}"
            }
        },
        "napc_parser_parseBoolean": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "The string to be parsed."
                },
                {
                    "type": "bool *",
                    "name": "out",
                    "description": "Pointer to a variable to store the result. (optional)"
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a boolean from string.",
                "description": "Attempts to parse a boolean from a string.\n\nThis function recognizes the following formats:\n - `\"yes\"`, `\"true\"`, `\"1\"` for `true`\n - `\"no\"`, `\"false\"`, `\"0\"` for `false`",
                "notes": "The casing of the string formats does not matter. (for example `yeS` is recognized as `true`)",
                "example": "bool out;\n\nif (napc_parser_parseBoolean(\"yes\", &out)) {\n    \/\/ parsing sucessfull!\n    \/\/ `out` now has the value `true`\n}"
            }
        },
        "napc_parser_parseHexString": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "The string to be parsed."
                },
                {
                    "type": "napc_size",
                    "name": "n_bytes",
                    "description": "Number of bytes to be parsed."
                },
                {
                    "type": "napc_u8 *",
                    "name": "out",
                    "description": "Array to store result. (optional)"
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a string containing hexadecimal characters.",
                "description": "Parse a string of hexadecimal characters.",
                "warning": "The string's length must exactly be double `n_bytes`.",
                "example": "const char *hex_str = \"deadbeefabcdefaa123b\";\nnapc_u8 bytes[10];\n\nif (napc_parser_parseHexString(hex_str, 10, bytes)) {\n    napc_printf(\"The hex value is: \");\n\n    for (int i = 0; i < 10; ++i) {\n        napc_printf(\"%2.2x\", bytes[i]);\n    }\n\n    napc_printf(\"\\n\");\n}"
            }
        },
        "napc_parser_parseMACAddress": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "String to be parsed."
                },
                {
                    "type": "napc_u8 *",
                    "name": "out",
                    "description": "Array to store result. (optional)"
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a MAC-Address.",
                "description": "Parse a MAC-Address (in the format of `aa:bb:cc:dd:ee:ff`) from string.",
                "warning": "The output array must have at least 6 elements (6 bytes).",
                "example": "napc_u8 addr[6];\n\nif (napc_parser_parseMACAddress(\"ab:de:ef:11:22:33\", addr)) {\n    \/\/ addr[0] now contains 171 (0xab)\n    \/\/ addr[1] now contains 222 (0xde)\n    \/\/ addr[2] now contains 239 (0xef)\n    \/\/ addr[3] now contains 17  (0x11)\n    \/\/ addr[4] now contains 34  (0x22)\n    \/\/ addr[5] now contains 51  (0x33)\n} else {\n    napc_printf(\"Failed to parse MAC-Address!\\n\");\n}"
            }
        },
        "napc_parser_parseIPv4Address": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "The string to be parsed."
                },
                {
                    "type": "napc_u8 *",
                    "name": "out",
                    "description": "Array to store result. (optional)"
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse an IPv4-Address.",
                "description": "Parse an IPv4-Address (in the format of `a.b.c.d`) from string.",
                "warning": "The output array must have at least 4 elements (4 bytes).",
                "example": "napc_u8 addr[4];\n\nif (napc_parser_parseIPv4Address(\"1.2.3.4\", addr)) {\n    \/\/ addr[0] now contains 1\n    \/\/ addr[1] now contains 2\n    \/\/ addr[2] now contains 3\n    \/\/ addr[3] now contains 4\n} else {\n    napc_printf(\"Failed to parse IP-Address!\\n\");\n}"
            }
        },
        "napc_parser_parseKeyValue": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "The string to be parsed."
                },
                {
                    "type": "char *",
                    "name": "key",
                    "description": "Buffer to place parsed key string."
                },
                {
                    "type": "napc_size",
                    "name": "key_len",
                    "description": "Size of `key` buffer."
                },
                {
                    "type": "char *",
                    "name": "value",
                    "description": "Buffer to place parsed value string."
                },
                {
                    "type": "napc_size",
                    "name": "value_len",
                    "description": "Size of `value` buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a key,value pair.",
                "description": "Parse a string in `key,value` format.",
                "example": "char key[32];\nchar value[32];\n\nbool result = napc_parser_parseKeyValue(\n    \"test,1234\",\n     key, sizeof(key),\n     value, sizeof(value)\n);\n\nif (result) {\n    \/\/ key is \"test\"\n    \/\/ value is \"1234\"\n}"
            }
        },
        "napc_aes_encrypt": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": ""
            },
            "params": [
                {
                    "type": "const napc_u8 *",
                    "name": "iv",
                    "description": "Initialization vector (16 bytes)"
                },
                {
                    "type": "const char *",
                    "name": "key",
                    "description": "Key in HEX format (32 bytes)"
                },
                {
                    "type": "void *",
                    "name": "buffer",
                    "description": "Buffer to encrypt."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Encrypt a message with AES-256.",
                "description": "Encrypt a message with AES-256 in CBC mode.",
                "warning": "The input buffer must always be aligned to 16 bytes.",
                "example": "char message[32];\nnapc_u8 iv[16];\nconst char *key = \"secret\";\nchar key_hashed[65];\n\n\/\/ initialize IV with random bytes\n\/\/ note that napc_random_getRandomBytesSync() is used here for simplicity\n\/\/ it is better to use napc_random_getRandomBytes().\nnapc_random_getRandomBytesSync(sizeof(iv), iv);\n\n\/\/ since napc_aes_encrypt() expects a HEX formatted key string\n\/\/ we simply calculate the SHA256 hash of the key\n\/\/ which is guaranteed to be a 32 byte hex formatted string.\nif (napc_sha_calculate(key, napc_strlen(key), key_hashed, sizeof(key_hashed))) {\n    \/\/ set all bytes in message to zero\n    \/\/ napc_aes_encrypt() always needs the input buffer's size to be\n    \/\/ a multiple of 16. This way unused bytes are always zero.\n    napc_mzero(message, sizeof(message));\n\n    \/\/ copy a message\n    napc_strncpy(message, \"Hello, World!\", sizeof(message));\n\n    \/\/ do the encryption\n    if (napc_aes_encrypt(iv, key_hashed, message, sizeof(message))) {\n        \/\/ message is now encrypted\n        napc_printf(\"Message encrypted!\\n\");\n\n        napc_printf(\"Key: %s\\n\", key_hashed);\n\n        napc_printf(\"IV: \");\n        napc_misc_printHexArray(iv, sizeof(iv));\n        napc_printf(\"\\n\");\n\n        napc_printf(\"Ciphertext: \");\n        napc_misc_printHexArray(message, sizeof(message));\n        napc_printf(\"\\n\");\n    }\n}"
            }
        },
        "napc_aes_decrypt": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const napc_u8 *",
                    "name": "iv",
                    "description": "Initialization vector (16 bytes)"
                },
                {
                    "type": "const char *",
                    "name": "key",
                    "description": "Key in HEX format (32 bytes)"
                },
                {
                    "type": "void *",
                    "name": "buffer",
                    "description": "Buffer to encrypt."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Decrypt a message with AES-256.",
                "description": "Decrypt a message with AES-256 in CBC mode.",
                "warning": "The input buffer must always be aligned to 16 bytes."
            }
        },
        "napc_hmac_calculate": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc_u8 *",
                    "name": "out",
                    "description": "Pointer to store resulting HMAC (32 bytes)"
                },
                {
                    "type": "const char *",
                    "name": "key",
                    "description": "Key to be used."
                },
                {
                    "type": "const void *",
                    "name": "buffer",
                    "description": "Buffer containing the message."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Calculate HMAC of a message.",
                "description": "Calculate the SHA-256 HMAC signature of a message."
            }
        },
        "napc_hmac_verify": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if the message matches the `hmac` signature."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "key",
                    "description": "Key to be used."
                },
                {
                    "type": "const napc_u8 *",
                    "name": "hmac",
                    "description": "Pointer to HMAC (32 bytes)"
                },
                {
                    "type": "const void *",
                    "name": "buffer",
                    "description": "Buffer containing the message."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Verify a message with HMAC.",
                "description": "Verify a message."
            }
        },
        "napc_misc_printHexArray": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const void *",
                    "name": "bytes",
                    "description": "Bytes array."
                },
                {
                    "type": "napc_size",
                    "name": "n_bytes",
                    "description": "Size of bytes array."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.5.0",
                "changelog": [
                    {
                        "version": "1.5.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Print an array of integers",
                "rationale": "It's cumbersome to write a loop for printing out hex arrays.",
                "example": "napc_u8 array[4] = {0xde, 0xad, 0xbe, 0xef};\n\n\/\/ prints deadbeef\nnapc_misc_printHexArray(array, sizeof(array));"
            }
        },
        "napc_misc_shiftArrayRight": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "void *",
                    "name": "array",
                    "description": "The array to be shifted."
                },
                {
                    "type": "napc_size",
                    "name": "n_elements",
                    "description": "The number of elements in `array`."
                },
                {
                    "type": "napc_size",
                    "name": "element_size",
                    "description": "The size (in bytes) of one element in `array`."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Shift elements in an array.",
                "description": "Shift elements in `array` one element to the right discarding the last\nelement in the array.",
                "notes": "The contents of the first element in `array` will be undefined after this operation.",
                "example": "int data[5] = {1, 2, 3, 4, 5};\n\nnapc_misc_shiftArrayRight(data, 5, sizeof(int));\n\n\/\/ data[0] is now undefined\n\/\/ data[1] is now 1\n\/\/ data[2] is now 2\n\/\/ data[3] is now 3\n\/\/ data[4] is now 4"
            }
        },
        "napc_misc_setMemoryFenceBytes": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "unsigned char *",
                    "name": "buffer",
                    "description": ""
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": ""
                },
                {
                    "type": "napc_size",
                    "name": "memory_fence_size",
                    "description": ""
                },
                {
                    "type": "napc_u8",
                    "name": "fence_value",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_misc_verifyMemoryFenceBytes": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": ""
            },
            "params": [
                {
                    "type": "unsigned char *",
                    "name": "buffer",
                    "description": ""
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": ""
                },
                {
                    "type": "napc_size",
                    "name": "memory_fence_size",
                    "description": ""
                },
                {
                    "type": "napc_u8",
                    "name": "fence_value",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_misc_chunkedOperation": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const void *",
                    "name": "data",
                    "description": "Data to process."
                },
                {
                    "type": "napc_size",
                    "name": "data_size",
                    "description": "Size of data to process."
                },
                {
                    "type": "napc_size",
                    "name": "chunk_size",
                    "description": "Size of one chunk."
                },
                {
                    "type": "napc_misc_ChunkedOperationCallback",
                    "name": "fn",
                    "description": "Callback for processing one chunk."
                },
                {
                    "type": "void *",
                    "name": "fn_context",
                    "description": "Optional context for `fn` callback."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Perform an operation in chunks.",
                "description": "Performs an operation in chunks.",
                "notes": "`fn` is a function with the following prototype:\n\n`napc_ssize (const void *data, napc_size data_size, void *context)`"
            }
        },
        "napc_Reader_init": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Reader *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Reader instance."
                },
                {
                    "type": "const void *",
                    "name": "data",
                    "description": "Pointer to the buffer to be read."
                },
                {
                    "type": "napc_size",
                    "name": "data_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Initialize a reader.",
                "description": "Initialize a reader.",
                "example": "napc__Reader reader;\nchar buffer[512];\n\nnapc_Reader_init(&reader, buffer, sizeof(buffer));"
            }
        },
        "napc_Reader_create": {
            "type": "fn",
            "return": {
                "type": "napc__Reader",
                "description": ""
            },
            "params": [
                {
                    "type": "const void *",
                    "name": "data",
                    "description": "Pointer to the buffer to be read."
                },
                {
                    "type": "napc_size",
                    "name": "data_size",
                    "description": "Size of `data`."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Create a reader object.",
                "description": "Create a reader.",
                "example": "char buffer[512];\n\nnapc__Reader reader = napc_Reader_create(buffer, sizeof(buffer));"
            }
        },
        "napc_Reader_readU8": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__Reader *",
                    "name": "ctx",
                    "description": "Pointer to napc__Reader instance."
                },
                {
                    "type": "napc_u8 *",
                    "name": "out",
                    "description": "Pointer to store result."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Read an unsigned integer (8 bits).",
                "description": "Read an unsigned integer (8 bit) from buffer.",
                "example": "napc_u8 buffer[] = {4, 3, 2, 1};\nnapc__Reader reader;\n\nnapc_Reader_init(&reader, buffer, sizeof(buffer));\n\nnapc_u8 out;\n\nif (napc_Reader_readU8(&reader, &out)) {\n    \/\/ out has the value '4'\n}"
            }
        },
        "napc_Reader_readU8Array": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__Reader *",
                    "name": "ctx",
                    "description": "Pointer to napc__Reader instance."
                },
                {
                    "type": "napc_size",
                    "name": "n_elements",
                    "description": "Number of elements to read."
                },
                {
                    "type": "napc_u8 *",
                    "name": "out",
                    "description": "Array to store bytes."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Read an array of unsigned integers (8 bits).",
                "description": "Read an array of unsigned integers (8 bit) from buffer."
            }
        },
        "napc_Reader_readU16BE": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__Reader *",
                    "name": "ctx",
                    "description": "Pointer to napc__Reader instance."
                },
                {
                    "type": "napc_u16 *",
                    "name": "out",
                    "description": "Pointer to store result."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Read an unsigned integer (16 bits).",
                "description": "Read an unsigned integer (16 bit) in big endian order from buffer.",
                "example": "napc_u8 buffer[] = {4, 3, 2, 1};\nnapc__Reader reader;\n\nnapc_Reader_init(&reader, buffer, sizeof(buffer));\n\nnapc_u16 out;\n\nif (napc_Reader_readU16BE(&reader, &out)) {\n    \/\/ out has the value 772 (0x0403)\n}"
            }
        },
        "napc_Reader_readU32BE": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__Reader *",
                    "name": "ctx",
                    "description": "Pointer to napc__Reader instance."
                },
                {
                    "type": "napc_u32 *",
                    "name": "out",
                    "description": "Pointer to store result."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Read an unsigned integer (32 bits).",
                "description": "Read an unsigned integer (32 bit) in big endian order from buffer.",
                "example": "napc_u8 buffer[] = {4, 3, 2, 1};\nnapc__Reader reader;\n\nnapc_Reader_init(&reader, buffer, sizeof(buffer));\n\nnapc_u32 out;\n\nif (napc_Reader_readU32BE(&reader, &out)) {\n    \/\/ out has the value 67305985 (0x04030201)\n}"
            }
        },
        "napc_Reader_readChar": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__Reader *",
                    "name": "ctx",
                    "description": "Pointer to napc__Reader instance."
                },
                {
                    "type": "char *",
                    "name": "out",
                    "description": "Pointer to store result."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Read a single character.",
                "description": "Read a character (8 bit) from buffer."
            }
        },
        "napc_Reader_readString": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__Reader *",
                    "name": "ctx",
                    "description": "Pointer to napc__Reader instance."
                },
                {
                    "type": "napc_size",
                    "name": "str_len",
                    "description": "Length of string to be read."
                },
                {
                    "type": "char *",
                    "name": "out",
                    "description": "Pointer to store result."
                },
                {
                    "type": "napc_size",
                    "name": "out_size",
                    "description": "Size of `out`."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Read a string.",
                "description": "Read a string from buffer.",
                "notes": "Resulting string (that is placed in `out`) is always NUL-terminated."
            }
        },
        "napc_Reader_readLine": {
            "type": "fn",
            "return": {
                "type": "const char *",
                "description": "Returns `line_buffer` if a line was parsed, `NULL` otherwise."
            },
            "params": [
                {
                    "type": "napc__Reader *",
                    "name": "ctx",
                    "description": "Pointer to napc__Reader instance."
                },
                {
                    "type": "char *",
                    "name": "line_buffer",
                    "description": "Buffer to place line into."
                },
                {
                    "type": "napc_size",
                    "name": "line_buffer_size",
                    "description": "Size of the line buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Read a line.",
                "description": "Read a line from buffer.",
                "notes": "The resulting string in `line_buffer` will always be NUL-terminated.",
                "example": "char line_buffer[128];\nnapc__Reader reader;\nconst char *str = \"First line\\nSecond line\\nThird line\";\n\nnapc_Reader_init(&reader, str, napc_strlen(str));\n\nwhile (true) {\n    const char *current_line = napc_Reader_readLine(&reader, line_buffer, sizeof(line_buffer));\n\n    if (!current_line) break;\n\n    napc_printf(\"Read line: %s\", current_line);\n}"
            }
        },
        "napc_Reader_getCurrentOffset": {
            "type": "fn",
            "return": {
                "type": "napc_size",
                "description": ""
            },
            "params": [
                {
                    "type": "const napc__Reader *",
                    "name": "ctx",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_Reader_getCurrentAddress": {
            "type": "fn",
            "return": {
                "type": "const void *",
                "description": ""
            },
            "params": [
                {
                    "type": "const napc__Reader *",
                    "name": "ctx",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_Reader_getEndAddress": {
            "type": "fn",
            "return": {
                "type": "const void *",
                "description": ""
            },
            "params": [
                {
                    "type": "const napc__Reader *",
                    "name": "ctx",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_Writer_init": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Writer *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Writer instance to be initialized."
                },
                {
                    "type": "void *",
                    "name": "data",
                    "description": "Pointer to the buffer that we want to write to."
                },
                {
                    "type": "napc_size",
                    "name": "data_size",
                    "description": "Size of `data`."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0.",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Initialize a writer.",
                "description": "Initialize a writer.",
                "example": "napc__Writer writer;\nchar buffer[512];\n\nnapc_Writer_init(&writer, buffer, sizeof(buffer));"
            }
        },
        "napc_Writer_create": {
            "type": "fn",
            "return": {
                "type": "napc__Writer",
                "description": ""
            },
            "params": [
                {
                    "type": "void *",
                    "name": "data",
                    "description": "Pointer to the buffer that we want to write to."
                },
                {
                    "type": "napc_size",
                    "name": "data_size",
                    "description": "Size of `data`."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0.",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Create a writer object.",
                "description": "Create a writer.",
                "example": "char buffer[512];\n\nnapc__Writer writer = napc_Writer_create(buffer, sizeof(buffer));"
            }
        },
        "napc_Writer_getCurrentOffset": {
            "type": "fn",
            "return": {
                "type": "napc_size",
                "description": "Returns the current buffer offset from the writer instance."
            },
            "params": [
                {
                    "type": "const napc__Writer *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Writer instance."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get internal offset.",
                "description": "Get buffer offset from the writer instance."
            }
        },
        "napc_Writer_moveCurrentOffsetByAmount": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, otherwise `false`."
            },
            "params": [
                {
                    "type": "napc__Writer *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Writer instance."
                },
                {
                    "type": "napc_ssize",
                    "name": "amount",
                    "description": "The amount."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Move internal offset.",
                "description": "Move offset by `amount` of bytes.\nA negative `offset` is permitted."
            }
        },
        "napc_Writer_resetCurrentOffset": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Writer *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Writer instance."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Reset internal offset.",
                "description": "Reset offset back to zero."
            }
        },
        "napc_Writer_writeU8": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, otherwise `false`."
            },
            "params": [
                {
                    "type": "napc__Writer *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Writer instance."
                },
                {
                    "type": "napc_u8",
                    "name": "value",
                    "description": "Value to be written."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Write an unsigned integer (8 bits).",
                "description": "Write the unsigned integer value `value`.",
                "example": "napc__Writer writer;\nchar buffer[512];\n\nnapc_Writer_init(&writer, buffer, sizeof(buffer));\n\nnapc_Writer_writeU8(&writer, 0xAA);\nnapc_Writer_writeU8(&writer, 0xBB);\n\n\/\/ buffer[0] is now 0xAA\n\/\/ buffer[1] is now 0xBB"
            }
        },
        "napc_Writer_writeU8Array": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, otherwise `false`."
            },
            "params": [
                {
                    "type": "napc__Writer *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Writer instance."
                },
                {
                    "type": "napc_size",
                    "name": "n_elements",
                    "description": "The number of elements in `array`."
                },
                {
                    "type": "const napc_u8 *",
                    "name": "array",
                    "description": "The array to be written."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Write an array unsigned integers (8 bits).",
                "description": "Write an array of unsigned integer values."
            }
        },
        "napc_Writer_writeU16BE": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, otherwise `false`."
            },
            "params": [
                {
                    "type": "napc__Writer *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Writer instance."
                },
                {
                    "type": "napc_u16",
                    "name": "value",
                    "description": "Value to be written."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Write an unsigned integer (16 bits).",
                "description": "Write the 16 bit unsigned integer value `value` in big endian order."
            }
        },
        "napc_Writer_writeU32BE": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, otherwise `false`."
            },
            "params": [
                {
                    "type": "napc__Writer *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Writer instance."
                },
                {
                    "type": "napc_u32",
                    "name": "value",
                    "description": "Value to be written."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Write an unsigned integer (32 bits).",
                "description": "Write the 32 bit unsigned integer value `value` in big endian order."
            }
        },
        "napc_Writer_writeChar": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, otherwise `false`."
            },
            "params": [
                {
                    "type": "napc__Writer *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Writer instance."
                },
                {
                    "type": "char",
                    "name": "value",
                    "description": "Character to be written."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Write a single character.",
                "description": "Attempts to write the character `value`."
            }
        },
        "napc_Writer_writeString": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, otherwise `false`."
            },
            "params": [
                {
                    "type": "napc__Writer *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Writer instance."
                },
                {
                    "type": "const char *",
                    "name": "value",
                    "description": "String to be written."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Write a string.",
                "description": "Write a string.",
                "notes": "No NUL-termination will be placed in the underlying buffer."
            }
        },
        "napc_Writer_writeStringFormat": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, otherwise `false`."
            },
            "params": [
                {
                    "type": "napc__Writer *",
                    "name": "ctx",
                    "description": "Pointer to the napc__Writer instance."
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "...",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Write a string format.",
                "description": "Write a printf-like formatted string.",
                "notes": "No NUL-termination will be placed in the underlying buffer.",
                "example": "napc__Writer writer;\nchar buffer[512];\n\nnapc_Writer_init(&writer, buffer, sizeof(buffer));\n\nnapc_Writer_writeStringFormat(&writer, \"Hello %s!\", \"World!\");\n\n\/\/ the first 12 bytes of `buffer`\n\/\/ now contain \"Hello World!\""
            }
        },
        "napc_IPv4Participant_init": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__IPv4Participant *",
                    "name": "participant",
                    "description": "Pointer to instance to initialize."
                },
                {
                    "type": "const char *",
                    "name": "addr",
                    "description": "IPv4-Address of participant in format `a.b.c.d`."
                },
                {
                    "type": "napc_u16",
                    "name": "port",
                    "description": "Port of participant."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Initialize a participant.",
                "description": "Initialize a participant.",
                "notes": "Input address (`addr`) will be copied into `participant`."
            }
        },
        "napc_IPv4Participant_create": {
            "type": "fn",
            "return": {
                "type": "napc__IPv4Participant",
                "description": "Returns an initialized participant."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "addr",
                    "description": "IPv4-Address of participant in format `a.b.c.d`."
                },
                {
                    "type": "napc_u16",
                    "name": "port",
                    "description": "Port of participant."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Create a participant object.",
                "description": "Create a participant.",
                "notes": "Input address (`addr`) will be copied into `participant`.",
                "example": "napc__IPv4Participant google_dns = napc_IPv4Participant_create(\"8.8.8.8\", 53);"
            }
        },
        "napc_IPv4Participant_copy": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__IPv4Participant *",
                    "name": "dest",
                    "description": "Pointer to destination."
                },
                {
                    "type": "napc__IPv4Participant",
                    "name": "source",
                    "description": "Source."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Copy a participant.",
                "description": "Create a copy of a participant."
            }
        },
        "napc_DNS_parseHeader": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__DNSHeader *",
                    "name": "out",
                    "description": "Pointer to a `napc__DNSHeader` to store result."
                },
                {
                    "type": "const void *",
                    "name": "buffer",
                    "description": "Buffer to be parsed."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a DNS-Header from a buffer."
            }
        },
        "napc_DNS_parseRequest": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__DNSRequest *",
                    "name": "out",
                    "description": "Pointer to a `napc__DNSRequest` to store result."
                },
                {
                    "type": "const void *",
                    "name": "buffer",
                    "description": "Buffer to be parsed."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a DNS-Request from a buffer."
            }
        },
        "napc_DNS_parseResponse": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__DNSResponse *",
                    "name": "out",
                    "description": "Pointer to a `napc__DNSResponse` to store result."
                },
                {
                    "type": "const void *",
                    "name": "buffer",
                    "description": "Buffer to be parsed."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Parse a DNS-Response from a buffer.",
                "description": "Parse a DNS-Response from a buffer."
            }
        },
        "napc_Buffer_init": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Buffer *",
                    "name": "buffer",
                    "description": "Pointer to napc__Buffer instance to be initialized."
                },
                {
                    "type": "void *",
                    "name": "data",
                    "description": "Pointer to data."
                },
                {
                    "type": "napc_size",
                    "name": "data_size",
                    "description": "Size of data."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Initialize a buffer.",
                "description": "Initialize a buffer.",
                "example": "char message[512];\nnapc__Buffer buffer;\n\nnapc_Buffer_init(&buffer, message, sizeof(message));"
            }
        },
        "napc_Buffer_create": {
            "type": "fn",
            "return": {
                "type": "napc__Buffer",
                "description": "Returns an initialized buffer."
            },
            "params": [
                {
                    "type": "void *",
                    "name": "data",
                    "description": "Pointer to data."
                },
                {
                    "type": "napc_size",
                    "name": "data_size",
                    "description": "Size of data."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Create a buffer.",
                "description": "Create a buffer.",
                "example": "char message[512];\n\nnapc__Buffer buffer = napc_Buffer_create(message, sizeof(message));"
            }
        },
        "napc_mem_registerSharedBuffer": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "label",
                    "description": "Label of shared buffer."
                },
                {
                    "type": "void *",
                    "name": "buffer",
                    "description": "Buffer start address."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of `buffer`."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Registers a global shared buffer."
            }
        },
        "napc_mem_claimSharedBuffer": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "label",
                    "description": "The shared buffer to be claimed."
                },
                {
                    "type": "napc__Buffer **",
                    "name": "out",
                    "description": "`napc__Buffer` object to place buffer address and size in."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Claim the shared buffer `label` making it unavailable to other callers until\nit is released."
            }
        },
        "napc_mem_releaseSharedBuffer": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__Buffer *",
                    "name": "buffer",
                    "description": "The buffer to be released."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Release a shared buffer making it available for others again."
            }
        },
        "napc_sha_calculate": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": ""
            },
            "params": [
                {
                    "type": "const void *",
                    "name": "buffer",
                    "description": "Buffer to calculate hash of."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of buffer."
                },
                {
                    "type": "char *",
                    "name": "out",
                    "description": "Array to store output in HEX format (32 bytes)."
                },
                {
                    "type": "napc_size",
                    "name": "out_size",
                    "description": "Size of output array."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.5.0",
                "changelog": [
                    {
                        "version": "1.5.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Calculate SHA256 hash.",
                "description": "Calculates the SHA-256 hash of a message.",
                "warning": "The output array must have at least 65 elements.",
                "example": "char out[65];\nconst char *str = \"secret\";\n\nnapc_sha_calculate(str, napc_strlen(str), out, sizeof(out));\n\nnapc_printf(\"SHA256-hash of '%s' is '%s'\\n\");"
            }
        },
        "napc_eth_getLinkStatus": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if ethernet link is established, `false` otherwise."
            },
            "params": [],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get the link status of network adapter.",
                "example": "if (napc_eth_getLinkStatus()) {\n    napc_printf(\"Ethernet link established.\\n\");\n}"
            }
        },
        "napc_eth_setMACAddress": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "mac",
                    "description": "MAC-Address in format `aa:bb:cc:dd:ee:ff`."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Set mac address of network adapter.",
                "example": "napc_eth_setMACAddress(\"88:24:D3:27:9A:2F\");"
            }
        },
        "napc_eth_setIPAddress": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "ip",
                    "description": "IPv4-Address in format `a.b.c.d`."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Set ip address of network adapter.",
                "example": "napc_eth_setIPAddress(\"192.168.1.50\");"
            }
        },
        "napc_eth_setSubnetMask": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "submask",
                    "description": "Subnetmask in format `a.b.c.d`."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Set subnetmask of network adapter.",
                "example": "napc_eth_setSubnetMask(\"255.255.255.0\");"
            }
        },
        "napc_eth_setGatewayAddress": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "ip",
                    "description": "IPv4-Address in format `a.b.c.d`."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Set the gateway address of network adapter.",
                "example": "napc_eth_setGatewayAddress(\"192.168.1.1\");"
            }
        },
        "napc_UDP_createSocket": {
            "type": "fn",
            "return": {
                "type": "napc__UDPSocket",
                "description": "Returns a negative number if socket could not be created."
            },
            "params": [
                {
                    "type": "napc_u16",
                    "name": "port",
                    "description": "IPv4 port number."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Open an UDP-Socket.",
                "description": "Open an UDP-socket on port `port` for receiving and sending messages.",
                "example": "napc__UDPSocket udp_sock = napc_UDP_createSocket(2020);\n\nif (0 > udp_sock) {\n    NAPC_PANIC(\"Failed to create UDP-socket.\");\n}"
            }
        },
        "napc_UDP_receive": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `false` if no message was received."
            },
            "params": [
                {
                    "type": "napc__UDPSocket",
                    "name": "udp_socket",
                    "description": "The UDP socket to receive from."
                },
                {
                    "type": "napc__IPv4Participant *",
                    "name": "source",
                    "description": "Source of received message (optional)."
                },
                {
                    "type": "napc__Buffer *",
                    "name": "out",
                    "description": "Pointer to a buffer to place received message."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Receive an UDP-message.",
                "description": "Receive a message on a UDP socket.",
                "warning": "It's not possible to receive a UDP packet with a size greater than `1500` bytes (MTU limit).",
                "example": "char message_buffer[512];\nnapc__Buffer buf;\n\nnapc__UDPSocket udp_socket = napc_UDP_createSocket(2020);\n\nnapc_Buffer_init(&buf, message_buffer, sizeof(message_buffer));\n\nif (napc_UDP_receive(&udp_socket, NULL, &buf)) {\n    napc_printf(\"Received %\" NAPC_SIZE_PRINTF \" bytes\\n\", buf.size);\n}"
            }
        },
        "napc_UDP_send": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__UDPSocket",
                    "name": "udp_socket",
                    "description": "The UDP socket to write the message to."
                },
                {
                    "type": "napc__IPv4Participant",
                    "name": "destination",
                    "description": "IPv4 destination (ip & port)."
                },
                {
                    "type": "const void *",
                    "name": "buffer",
                    "description": "Message to be sent."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of the message."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Send an UPD-message.",
                "description": "Send a UDP message to `destination`.",
                "warning": "It's not possible to send UDP packets with a size greater than `1500` bytes (MTU limit)."
            }
        },
        "napc_UDP_sendSilent": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "napc__UDPSocket",
                    "name": "udp_socket",
                    "description": "The UDP socket to write the message to."
                },
                {
                    "type": "napc__IPv4Participant",
                    "name": "destination",
                    "description": "IPv4 destination (ip & port)."
                },
                {
                    "type": "const void *",
                    "name": "buffer",
                    "description": "Message to be sent."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of the message."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Send an UDP-message.",
                "description": "Same as `napc_UDP_send()` but does not log anything.\nUsed to send log over the network to another device.",
                "warning": "It's not possible to send UDP packets with a size greater than `1500` bytes (MTU limit)."
            }
        },
        "napc_UDP_closeSocket": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__UDPSocket",
                    "name": "udp_socket",
                    "description": "The UDP-socket to be closed."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Close an open UDP-socket.",
                "description": "Close an open UDP-socket."
            }
        },
        "napc_UDP_getNumOpenSockets": {
            "type": "fn",
            "return": {
                "type": "napc_size",
                "description": "Returns the number of open UDP sockets."
            },
            "params": [],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get the number of open UDP sockets.",
                "description": "Gets the number of currently open UDP sockets."
            }
        },
        "napc_File_open": {
            "type": "fn",
            "return": {
                "type": "napc__File",
                "description": "Returns a negative number if file could not be opened."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "path",
                    "description": "Path to the file."
                },
                {
                    "type": "const char *",
                    "name": "mode",
                    "description": "Mode (`\"r\"` for reading, `\"w\"` for writing)."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Open a file.",
                "description": "Open a file for reading or writing.",
                "warning": "Opening a file in write mode (`\"w\"`) will always clear the previous contents of the file.",
                "example": "napc__File fd = napc_File_open(\"TEST.TXT\", \"r\");\n\nif (0 > fd) {\n    NAPC_PANIC(\"Failed to open TEST.TXT!\");\n}"
            }
        },
        "napc_File_write": {
            "type": "fn",
            "return": {
                "type": "napc_ssize",
                "description": "Returns the number of bytes written or `-1` on error."
            },
            "params": [
                {
                    "type": "napc__File",
                    "name": "file",
                    "description": "File to write to."
                },
                {
                    "type": "const void *",
                    "name": "data",
                    "description": "Buffer to write."
                },
                {
                    "type": "napc_size",
                    "name": "data_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Write to a file.",
                "description": "Write data to an open file."
            }
        },
        "napc_File_read": {
            "type": "fn",
            "return": {
                "type": "napc_ssize",
                "description": "Returns the number of bytes read or `-1` on error."
            },
            "params": [
                {
                    "type": "napc__File",
                    "name": "file",
                    "description": "File to read from."
                },
                {
                    "type": "void *",
                    "name": "buffer",
                    "description": "Buffer to write data to."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Read from a file.",
                "description": "Reads data from an open file."
            }
        },
        "napc_File_getSize": {
            "type": "fn",
            "return": {
                "type": "napc_size",
                "description": "Returns the file size in bytes."
            },
            "params": [
                {
                    "type": "napc__File",
                    "name": "file",
                    "description": "File to be measured."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Get size of file.",
                "description": "Get the size of an open file."
            }
        },
        "napc_File_close": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "napc__File",
                    "name": "file",
                    "description": "File to be closed."
                }
            ],
            "flags": [
                "hal"
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Close open file.",
                "description": "Close an open file."
            }
        },
        "napc_fs_writeFile": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "path",
                    "description": "File path."
                },
                {
                    "type": "const void *",
                    "name": "buffer",
                    "description": "Buffer to write."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Write data to a file.",
                "description": "Writes data to a file overwriting its previous contents.",
                "warning": "This function will always overwrite the previous contents of the file."
            }
        },
        "napc_fs_writeFileCString": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "path",
                    "description": "File path."
                },
                {
                    "type": "const char *",
                    "name": "string",
                    "description": "String to write to file."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Write a string to a file.",
                "description": "Writes a string to a file overwriting its previous contents.",
                "warning": "This function will always overwrite the previous contents of the file."
            }
        },
        "napc_fs_readFile": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "path",
                    "description": "File path."
                },
                {
                    "type": "napc__Buffer *",
                    "name": "buffer",
                    "description": "Buffer to write to."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Read a file in its entirety.",
                "description": "Reads the entire content of a file into a buffer."
            }
        },
        "napc_fs_readFileCString": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` on success, `false` otherwise."
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "path",
                    "description": "File path."
                },
                {
                    "type": "char *",
                    "name": "buffer",
                    "description": "Buffer to write to."
                },
                {
                    "type": "napc_size",
                    "name": "buffer_size",
                    "description": "Size of buffer."
                }
            ],
            "flags": [],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Read a file in its entirety.",
                "description": "Reads the entire content of a file into a NUL-terminated string."
            }
        },
        "napc_env_isFileSystemAvailable": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if file system functionality is available."
            },
            "params": [],
            "flags": [],
            "general_info": {
                "version": "1.1.0",
                "changelog": [
                    {
                        "version": "1.1.0",
                        "date": "18.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Check file system availability.",
                "example": "if (napc_env_isFileSystemAvailable()) {\n    napc_printf(\"File System is available.\\n\");\n}"
            }
        },
        "napc_env_isEthernetAvailable": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": "Returns `true` if ethernet functionality is available."
            },
            "params": [],
            "flags": [],
            "general_info": {
                "version": "1.1.0",
                "changelog": [
                    {
                        "version": "1.1.0",
                        "date": "18.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Check ethernet availability.",
                "example": "if (napc_env_isEthernetAvailable()) {\n    napc_printf(\"Ethernet is available.\\n\");\n}"
            }
        },
        "napc_app_setup": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "platform",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_app_loop": {
            "type": "fn",
            "return": {
                "type": "bool",
                "description": ""
            },
            "params": [
                {
                    "type": "napc_time",
                    "name": "uptime",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_main": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [
                {
                    "type": "const char *",
                    "name": "platform",
                    "description": ""
                }
            ],
            "flags": []
        },
        "napc_runAllTests": {
            "type": "fn",
            "return": {
                "type": "void",
                "description": ""
            },
            "params": [],
            "flags": []
        },
        "napc_u8": {
            "type": "type",
            "kind": "alias",
            "alias_of": "uint8_t",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "8 bit wide unsigned integer",
                "description": "Type for unsigned integers with 8 bits width."
            }
        },
        "napc_i8": {
            "type": "type",
            "kind": "alias",
            "alias_of": "int8_t",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "8 bit wide signed integer",
                "description": "Type for signed integers with 8 bits width."
            }
        },
        "napc_u16": {
            "type": "type",
            "kind": "alias",
            "alias_of": "uint16_t",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "16 bit wide unsigned integer",
                "description": "Type for unsigned integers with 16 bits width."
            }
        },
        "napc_i16": {
            "type": "type",
            "kind": "alias",
            "alias_of": "int16_t",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "16 bit wide signed integer",
                "description": "Type for signed integers with 16 bits width."
            }
        },
        "napc_u32": {
            "type": "type",
            "kind": "alias",
            "alias_of": "uint32_t",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "32 bit wide unsigned integer",
                "description": "Type for unsigned integers with 32 bits width."
            }
        },
        "napc_i32": {
            "type": "type",
            "kind": "alias",
            "alias_of": "int32_t",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "32 bit wide signed integer",
                "description": "Type for signed integers with 32 bits width."
            }
        },
        "napc_size": {
            "type": "type",
            "kind": "alias",
            "alias_of": "napc_u32",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Memory size type.",
                "description": "Unsigned integer type for holding object sizes.",
                "rationale": "Used because Arduino lacks `ssize_t` in `<stddef.h>`.\nFor some reason it is defined in `<stdio.h>` but\nI don't want to pollute my headers with unnecessary\nincludes. Also this way, I'm sure what printf specifiers\nto use when printing `size_t` resp. `ssize_t`.\n(`%zu` is not supported in arduino's libc)"
            }
        },
        "napc_ssize": {
            "type": "type",
            "kind": "alias",
            "alias_of": "napc_i32",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Signed memory size type.",
                "description": "Signed integer type for holding object sizes.",
                "rationale": "Used because Arduino lacks `ssize_t` in `<stddef.h>`.\nFor some reason it is defined in `<stdio.h>` but\nI don't want to pollute my headers with unnecessary\nincludes. Also this way, I'm sure what printf specifiers\nto use when printing `size_t` resp. `ssize_t`.\n(`%zu` is not supported in arduino's libc)"
            }
        },
        "napc_time": {
            "type": "type",
            "kind": "alias",
            "alias_of": "napc_u32",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Unsigned timestamp int type.",
                "description": "Unsigned integer type for holding timestamps."
            }
        },
        "napc__Pool": {
            "type": "type",
            "kind": "opaque",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Represenation of a fixed memory pool.",
                "notes": "Treat this type as opaque."
            }
        },
        "napc__OSTimer": {
            "type": "type",
            "kind": "opaque",
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a single shot timer.",
                "notes": "Treat this type as opaque."
            }
        },
        "napc__Timer": {
            "type": "type",
            "kind": "opaque",
            "general_info": {
                "version": "2.0.0",
                "changelog": [
                    {
                        "version": "2.0.0",
                        "date": "25.03.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a timer.",
                "notes": "Treat this type as opaque."
            }
        },
        "napc__Reader": {
            "type": "type",
            "kind": "opaque",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a reader.",
                "notes": "Treat this type as opaque."
            }
        },
        "napc__Writer": {
            "type": "type",
            "kind": "opaque",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a writer.",
                "notes": "Treat this type as opaque."
            }
        },
        "napc__IPv4Participant": {
            "type": "type",
            "kind": "struct",
            "fields": [
                {
                    "name": "addr",
                    "type": [
                        "char",
                        "64"
                    ],
                    "description": "IPv4-Address as string in format `a.b.c.d`."
                },
                {
                    "name": "port",
                    "type": "napc_u16",
                    "description": "Port number."
                }
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation a network device.",
                "description": "Representation of a participant in the internet protocol version 4 (IPv4)."
            }
        },
        "napc__DNSOPCode": {
            "type": "type",
            "kind": "enum",
            "values": [
                {
                    "name": "NAPC_DNS_OPCODE_QUERY",
                    "value": "",
                    "description": "Standard DNS-Query."
                },
                {
                    "name": "NAPC_DNS_OPCODE_IQUERY",
                    "value": "",
                    "description": "Inverse DNS-Query."
                },
                {
                    "name": "NAPC_DNS_OPCODE_STATUS",
                    "value": "",
                    "description": "Status op."
                },
                {
                    "name": "NAPC_DNS_OPCODE_NOTIFY",
                    "value": "",
                    "description": ""
                },
                {
                    "name": "NAPC_DNS_OPCODE_UPDATE",
                    "value": "",
                    "description": ""
                }
            ],
            "general_info": {
                "version": "1.0.0",
                "brief": "Representation of a DNS operation code."
            }
        },
        "napc__DNSHeader": {
            "type": "type",
            "kind": "struct",
            "fields": [
                {
                    "name": "opcode",
                    "type": "napc__DNSOPCode",
                    "description": "DNS operation code. See `napc__DNSOPCode`."
                },
                {
                    "name": "authoritative_answer",
                    "type": "bool",
                    "description": "Authoritative answer flag."
                },
                {
                    "name": "truncated",
                    "type": "bool",
                    "description": "Truncated flag."
                },
                {
                    "name": "request_identifier",
                    "type": "napc_u16",
                    "description": "DNS request identifier."
                },
                {
                    "name": "response_code",
                    "type": "napc_u16",
                    "description": "DNS-Server response code."
                },
                {
                    "name": "question_count",
                    "type": "napc_u16",
                    "description": "Number of DNS queries."
                },
                {
                    "name": "answer_count",
                    "type": "napc_u16",
                    "description": "Number of DNS answers."
                }
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a DNS header."
            }
        },
        "napc__DNSQType": {
            "type": "type",
            "kind": "enum",
            "values": [
                {
                    "name": "NAPC_DNS_QTYPE_A",
                    "value": "",
                    "description": "A-Record query"
                },
                {
                    "name": "NAPC_DNS_QTYPE_AAAA",
                    "value": "",
                    "description": "AAAA-Record query"
                }
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of DNS query type."
            }
        },
        "napc__DNSQuery": {
            "type": "type",
            "kind": "struct",
            "fields": [
                {
                    "name": "name",
                    "type": [
                        "char",
                        254
                    ],
                    "description": "Name to lookup."
                },
                {
                    "name": "qtype",
                    "type": "napc__DNSQType",
                    "description": "Query type, see `napc__DNSQType`."
                }
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a DNS query."
            }
        },
        "napc__DNSAnswer": {
            "type": "type",
            "kind": "struct",
            "fields": [
                {
                    "name": "ttl",
                    "type": "napc_u32",
                    "description": "Time to live (in seconds)."
                },
                {
                    "name": "rd_length",
                    "type": "napc_u16",
                    "description": "Response data size in bytes."
                },
                {
                    "name": "rd_data",
                    "type": [
                        "napc_u8",
                        16
                    ],
                    "description": "Response data."
                }
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a DNS answer."
            }
        },
        "napc__DNSRequest": {
            "type": "type",
            "kind": "struct",
            "fields": [
                {
                    "name": "header",
                    "type": "napc__DNSHeader",
                    "description": "DNS-Header, see `napc__DNSHeader`."
                },
                {
                    "name": "query",
                    "type": "napc__DNSQuery",
                    "description": "DNS-Query, see `napc__DNSQuery`."
                }
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a DNS request."
            }
        },
        "napc__DNSResponse": {
            "type": "type",
            "kind": "struct",
            "fields": [
                {
                    "name": "header",
                    "type": "napc__DNSHeader",
                    "description": "DNS-Header, see `napc__DNSHeader`."
                },
                {
                    "name": "num_answers",
                    "type": "napc_size",
                    "description": "Represents number of elements in `answers` array."
                },
                {
                    "name": "answers",
                    "type": [
                        "napc__DNSAnswer",
                        4
                    ],
                    "description": "DNS-Answers, see `napc__DNSAnswer`."
                }
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a DNS response."
            }
        },
        "napc__Buffer": {
            "type": "type",
            "kind": "struct",
            "fields": [
                {
                    "name": "size",
                    "type": "napc_size",
                    "description": "Size of data."
                },
                {
                    "name": "data",
                    "type": "void *",
                    "description": "Pointer to data."
                }
            ],
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a memory buffer."
            }
        },
        "napc__UDPSocket": {
            "type": "type",
            "kind": "opaque",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a UDP-Socket.",
                "notes": "Treat this type as opaque."
            }
        },
        "napc__File": {
            "type": "type",
            "kind": "opaque",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Representation of a file.",
                "description": "Representation of a file.",
                "notes": "Treat this type as opaque."
            }
        },
        "NAPC_PANIC": {
            "type": "macro",
            "params": [
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "n\/a",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Abort program execution.",
                "description": "Abort program execution and print a message.",
                "example": "NAPC_PANIC(\"Some error occurred: %s\", \"Could not open file\");"
            }
        },
        "NAPC_ASSERT": {
            "type": "macro",
            "params": [
                {
                    "type": "bool",
                    "name": "expr",
                    "description": "Expression to assert."
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "brief": "Make an assertion.",
                "description": "Assert an expression.",
                "example": "napc_u8 var = 13;\n\nNAPC_ASSERT(var == 13);"
            }
        },
        "NAPC_U8_LITERAL": {
            "type": "macro",
            "params": [
                {
                    "type": "n\/a",
                    "name": "value",
                    "description": "Value"
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Used for literal unsigned integers with 8 bits width.",
                "rationale": "This macro is only included for consistency's sake.",
                "example": "napc_u8 var = NAPC_U8_LITERAL(20);"
            }
        },
        "NAPC_U8_PRINTF": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Format specifier for printing `napc_u8` variables.",
                "rationale": "This macro is only included for consistency's sake.",
                "example": "napc_u8 var = 1;\n\nnapc_printf(\"var is = %\" NAPC_U8_PRINTF, var);"
            }
        },
        "NAPC_U16_LITERAL": {
            "type": "macro",
            "params": [
                {
                    "type": "n\/a",
                    "name": "value",
                    "description": "Value"
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Used for literal unsigned integers with 16 bits width.",
                "rationale": "This macro is only included for consistency's sake.",
                "example": "napc_u16 var = NAPC_U16_LITERAL(1234);"
            }
        },
        "NAPC_U16_PRINTF": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Format specifier for printing `napc_u16` variables.",
                "rationale": "This macro is only included for consistency's sake.",
                "example": "napc_u16 var = 1;\n\nnapc_printf(\"var is = %\" NAPC_U16_PRINTF, var);"
            }
        },
        "NAPC_U32_LITERAL": {
            "type": "macro",
            "params": [
                {
                    "type": "n\/a",
                    "name": "value",
                    "description": "Value"
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Used for literal unsigned integers with 32 bits width.",
                "example": "napc_u32 var = NAPC_U32_LITERAL(12345);"
            }
        },
        "NAPC_U32_PRINTF": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Format specifier for printing `napc_u32` variables.",
                "example": "napc_u32 var = 1;\n\nnapc_printf(\"var is = %\" NAPC_U32_PRINTF, var);"
            }
        },
        "NAPC_SIZE_LITERAL": {
            "type": "macro"
        },
        "NAPC_SIZE_PRINTF": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Format specifier for printing `napc_size` variables.",
                "example": "napc_size var = 1;\n\nnapc_printf(\"var is = %\" NAPC_SIZE_PRINTF, var);"
            }
        },
        "NAPC_SSIZE_LITERAL": {
            "type": "macro"
        },
        "NAPC_SSIZE_PRINTF": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Format specifier for printing `napc_ssize` variables.",
                "example": "napc_ssize var = -1;\n\nnapc_printf(\"var is = %\" NAPC_SSIZE_PRINTF, var);"
            }
        },
        "NAPC_TIME_LITERAL": {
            "type": "macro"
        },
        "NAPC_TIME_PRINTF": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Format specifier for printing `napc_time` variables.",
                "example": "napc_time var = 1;\n\nnapc_printf(\"var is = %\" NAPC_TIME_PRINTF, var);"
            }
        },
        "NAPC_FN_WARNUNUSED_RET": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Tell the compiler to emit a warning if the return value of a function is not used.",
                "example": "int my_function() NAPC_FN_WARNUNUSED_RET() {\n    return 4;\n}\n\nvoid napc_setup(const char *platform) {\n    my_function(); \/\/ will generate a compiler warning\n}\n\nbool napc_loop(napc_time uptime) {\n    return false;\n}"
            }
        },
        "NAPC_LOG": {
            "type": "macro",
            "params": [
                {
                    "type": "const char *",
                    "name": "subsys",
                    "description": "Subsystem."
                },
                {
                    "type": "int",
                    "name": "level",
                    "description": "Log level."
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "n\/a",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Log a message with a specific priority.",
                "example": "NAPC_LOG(\"subsystem\", NAPC_LEVEL_INFO, \"This is a %s!\", \"message\");"
            }
        },
        "NAPC_LEVEL_VERBOSE": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Representation of log priority `verbose`.",
                "example": "NAPC_LOG(\"subsystem\", NAPC_LEVEL_VERBOSE, \"This is a verbose log message.\");"
            }
        },
        "NAPC_LEVEL_TRACE": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Representation of log priority `trace`.",
                "example": "NAPC_LOG(\"subsystem\", NAPC_LEVEL_TRACE, \"This is a trace log message.\");"
            }
        },
        "NAPC_LEVEL_DEBUG": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Representation of log priority `debug`.",
                "example": "NAPC_LOG(\"subsystem\", NAPC_LEVEL_DEBUG, \"This is a debug log message.\");"
            }
        },
        "NAPC_LEVEL_INFO": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Representation of log priority `info`.",
                "example": "NAPC_LOG(\"subsystem\", NAPC_LEVEL_INFO, \"This is an info log message.\");"
            }
        },
        "NAPC_LEVEL_WARNING": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Representation of log priority `warning`.",
                "example": "NAPC_LOG(\"subsystem\", NAPC_LEVEL_WARNING, \"This is a warning log message.\");"
            }
        },
        "NAPC_LEVEL_ERROR": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Representation of log priority `error`.",
                "example": "NAPC_LOG(\"subsystem\", NAPC_LEVEL_ERROR, \"This is an error log message.\");"
            }
        },
        "NAPC_LEVEL_SECURITY": {
            "type": "macro",
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Representation of log priority `security`.",
                "example": "NAPC_LOG(\"subsystem\", NAPC_LEVEL_SECURITY, \"This is a security log message.\");"
            }
        },
        "NAPC_LOG_VERBOSE": {
            "type": "macro",
            "params": [
                {
                    "type": "const char *",
                    "name": "subsys",
                    "description": "Subsystem."
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "n\/a",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Log a message with priority `VERBOSE`.",
                "example": "NAPC_LOG_VERBOSE(\"subsystem\", \"This is a %s!\", \"message\");"
            }
        },
        "NAPC_LOG_TRACE": {
            "type": "macro",
            "params": [
                {
                    "type": "const char *",
                    "name": "subsys",
                    "description": "Subsystem."
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "n\/a",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Log a message with priority `TRACE`.",
                "example": "NAPC_LOG_TRACE(\"subsystem\", \"This is a %s!\", \"message\");"
            }
        },
        "NAPC_LOG_DEBUG": {
            "type": "macro",
            "params": [
                {
                    "type": "const char *",
                    "name": "subsys",
                    "description": "Subsystem."
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "n\/a",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Log a message with priority `DEBUG`.",
                "example": "NAPC_LOG_DEBUG(\"subsystem\", \"This is a %s!\", \"message\");"
            }
        },
        "NAPC_LOG_INFO": {
            "type": "macro",
            "params": [
                {
                    "type": "const char *",
                    "name": "subsys",
                    "description": "Subsystem."
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "n\/a",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Log a message with priority `INFO`.",
                "example": "NAPC_LOG_INFO(\"subsystem\", \"This is a %s!\", \"message\");"
            }
        },
        "NAPC_LOG_WARNING": {
            "type": "macro",
            "params": [
                {
                    "type": "const char *",
                    "name": "subsys",
                    "description": "Subsystem."
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "n\/a",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Log a message with priority `WARNING`.",
                "example": "NAPC_LOG_WARNING(\"subsystem\", \"This is a %s!\", \"message\");"
            }
        },
        "NAPC_LOG_ERROR": {
            "type": "macro",
            "params": [
                {
                    "type": "const char *",
                    "name": "subsys",
                    "description": "Subsystem."
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "n\/a",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Log a message with priority `ERROR`.",
                "example": "NAPC_LOG_ERROR(\"subsystem\", \"This is a %s!\", \"message\");"
            }
        },
        "NAPC_LOG_SECURITY": {
            "type": "macro",
            "params": [
                {
                    "type": "const char *",
                    "name": "subsys",
                    "description": "Subsystem."
                },
                {
                    "type": "const char *",
                    "name": "fmt",
                    "description": "printf()-like format string."
                },
                {
                    "type": "n\/a",
                    "name": "...",
                    "description": "Values to incorporate into string."
                }
            ],
            "variadic": false,
            "general_info": {
                "version": "1.0.0",
                "changelog": [
                    {
                        "version": "1.0.0",
                        "date": "17.02.2022",
                        "change": "initial version"
                    }
                ],
                "description": "Log a message with priority `SECURITY`.",
                "example": "NAPC_LOG_SECURITY(\"subsystem\", \"This is a %s!\", \"message\");"
            }
        }
    },
    "modules": {
        "Core": [
            "f:napc_version",
            "f:napc_getFullVersion",
            "f:napc_puts",
            "f:napc_putc",
            "f:napc_printf",
            "f:napc_mute",
            "f:napc_unmute",
            "f:napc_getTimeSinceBoot",
            "f:napc_delay",
            "f:napc_delayUs",
            "f:napc_snprintf",
            "f:napc_vsnprintf",
            "f:napc_strncpy",
            "f:napc_strlen",
            "f:napc_streql",
            "f:napc_streqli",
            "f:napc_memeql",
            "f:napc_mzero",
            "f:napc_halt",
            "f:napc_setup",
            "f:napc_loop",
            "f:napc_getUptime",
            "f:napc_getFreeMemory",
            "f:napc_logMessage",
            "f:napc_logLevelToString",
            "f:napc_getRandomBitSources",
            "f:napc_getRandomBit",
            "f:napc_getRandomByte",
            "f:napc_main",
            "f:napc_runAllTests",
            "t:napc_u8",
            "t:napc_i8",
            "t:napc_u16",
            "t:napc_i16",
            "t:napc_u32",
            "t:napc_i32",
            "t:napc_size",
            "t:napc_ssize",
            "t:napc_time",
            "m:NAPC_PANIC",
            "m:NAPC_ASSERT",
            "m:NAPC_U8_LITERAL",
            "m:NAPC_U8_PRINTF",
            "m:NAPC_U16_LITERAL",
            "m:NAPC_U16_PRINTF",
            "m:NAPC_U32_LITERAL",
            "m:NAPC_U32_PRINTF",
            "m:NAPC_SIZE_LITERAL",
            "m:NAPC_SIZE_PRINTF",
            "m:NAPC_SSIZE_LITERAL",
            "m:NAPC_SSIZE_PRINTF",
            "m:NAPC_TIME_LITERAL",
            "m:NAPC_TIME_PRINTF",
            "m:NAPC_FN_WARNUNUSED_RET",
            "m:NAPC_LOG",
            "m:NAPC_LEVEL_VERBOSE",
            "m:NAPC_LEVEL_TRACE",
            "m:NAPC_LEVEL_DEBUG",
            "m:NAPC_LEVEL_INFO",
            "m:NAPC_LEVEL_WARNING",
            "m:NAPC_LEVEL_ERROR",
            "m:NAPC_LEVEL_SECURITY",
            "m:NAPC_LOG_VERBOSE",
            "m:NAPC_LOG_TRACE",
            "m:NAPC_LOG_DEBUG",
            "m:NAPC_LOG_INFO",
            "m:NAPC_LOG_WARNING",
            "m:NAPC_LOG_ERROR",
            "m:NAPC_LOG_SECURITY"
        ],
        "Pool": [
            "f:napc_Pool_init",
            "f:napc_Pool_claimElement",
            "f:napc_Pool_allocate",
            "f:napc_Pool_isClaimed",
            "f:napc_Pool_isAllocated",
            "f:napc_Pool_getAvailable",
            "f:napc_Pool_getAddress",
            "f:napc_Pool_releaseElement",
            "f:napc_Pool_release",
            "t:napc__Pool"
        ],
        "OSTimer": [
            "f:napc_OSTimer_init",
            "f:napc_OSTimer_create",
            "f:napc_OSTimer_start",
            "f:napc_OSTimer_expired",
            "f:napc_OSTimer_restart",
            "t:napc__OSTimer"
        ],
        "Timer": [
            "f:napc_Timer_init",
            "f:napc_Timer_create",
            "f:napc_Timer_start",
            "f:napc_Timer_expired",
            "f:napc_Timer_restart",
            "t:napc__Timer"
        ],
        "random": [
            "f:napc_random_collectBytes",
            "f:napc_random_getAvailableBytes",
            "f:napc_random_getRandomBytes",
            "f:napc_random_getRandomBytesSync"
        ],
        "parser": [
            "f:napc_parser_parseDecimalNumberU8",
            "f:napc_parser_parseDecimalNumberU16",
            "f:napc_parser_parseDecimalNumberU32",
            "f:napc_parser_parseHexadecimalNumberU8",
            "f:napc_parser_parseHexadecimalNumberU16",
            "f:napc_parser_parseHexadecimalNumberU32",
            "f:napc_parser_parseBoolean",
            "f:napc_parser_parseHexString",
            "f:napc_parser_parseMACAddress",
            "f:napc_parser_parseIPv4Address",
            "f:napc_parser_parseKeyValue"
        ],
        "aes": [
            "f:napc_aes_encrypt",
            "f:napc_aes_decrypt"
        ],
        "hmac": [
            "f:napc_hmac_calculate",
            "f:napc_hmac_verify"
        ],
        "misc": [
            "f:napc_misc_printHexArray",
            "f:napc_misc_shiftArrayRight",
            "f:napc_misc_setMemoryFenceBytes",
            "f:napc_misc_verifyMemoryFenceBytes",
            "f:napc_misc_chunkedOperation"
        ],
        "Reader": [
            "f:napc_Reader_init",
            "f:napc_Reader_create",
            "f:napc_Reader_readU8",
            "f:napc_Reader_readU8Array",
            "f:napc_Reader_readU16BE",
            "f:napc_Reader_readU32BE",
            "f:napc_Reader_readChar",
            "f:napc_Reader_readString",
            "f:napc_Reader_readLine",
            "f:napc_Reader_getCurrentOffset",
            "f:napc_Reader_getCurrentAddress",
            "f:napc_Reader_getEndAddress",
            "t:napc__Reader"
        ],
        "Writer": [
            "f:napc_Writer_init",
            "f:napc_Writer_create",
            "f:napc_Writer_getCurrentOffset",
            "f:napc_Writer_moveCurrentOffsetByAmount",
            "f:napc_Writer_resetCurrentOffset",
            "f:napc_Writer_writeU8",
            "f:napc_Writer_writeU8Array",
            "f:napc_Writer_writeU16BE",
            "f:napc_Writer_writeU32BE",
            "f:napc_Writer_writeChar",
            "f:napc_Writer_writeString",
            "f:napc_Writer_writeStringFormat",
            "t:napc__Writer"
        ],
        "IPv4Participant": [
            "f:napc_IPv4Participant_init",
            "f:napc_IPv4Participant_create",
            "f:napc_IPv4Participant_copy",
            "t:napc__IPv4Participant"
        ],
        "DNS": [
            "f:napc_DNS_parseHeader",
            "f:napc_DNS_parseRequest",
            "f:napc_DNS_parseResponse",
            "t:napc__DNSOPCode",
            "t:napc__DNSHeader",
            "t:napc__DNSQType",
            "t:napc__DNSQuery",
            "t:napc__DNSAnswer",
            "t:napc__DNSRequest",
            "t:napc__DNSResponse"
        ],
        "Buffer": [
            "f:napc_Buffer_init",
            "f:napc_Buffer_create",
            "t:napc__Buffer"
        ],
        "mem": [
            "f:napc_mem_registerSharedBuffer",
            "f:napc_mem_claimSharedBuffer",
            "f:napc_mem_releaseSharedBuffer"
        ],
        "sha": [
            "f:napc_sha_calculate"
        ],
        "eth": [
            "f:napc_eth_getLinkStatus",
            "f:napc_eth_setMACAddress",
            "f:napc_eth_setIPAddress",
            "f:napc_eth_setSubnetMask",
            "f:napc_eth_setGatewayAddress"
        ],
        "UDP": [
            "f:napc_UDP_createSocket",
            "f:napc_UDP_receive",
            "f:napc_UDP_send",
            "f:napc_UDP_sendSilent",
            "f:napc_UDP_closeSocket",
            "f:napc_UDP_getNumOpenSockets",
            "t:napc__UDPSocket"
        ],
        "File": [
            "f:napc_File_open",
            "f:napc_File_write",
            "f:napc_File_read",
            "f:napc_File_getSize",
            "f:napc_File_close",
            "t:napc__File"
        ],
        "fs": [
            "f:napc_fs_writeFile",
            "f:napc_fs_writeFileCString",
            "f:napc_fs_readFile",
            "f:napc_fs_readFileCString"
        ],
        "env": [
            "f:napc_env_isFileSystemAvailable",
            "f:napc_env_isEthernetAvailable"
        ],
        "app": [
            "f:napc_app_setup",
            "f:napc_app_loop"
        ]
    },
    "modules_intro": {
        "Pool": {
            "@name": "Pool:intro",
            "@brief": "Static memory allocation"
        },
        "OSTimer": {
            "@name": "OSTimer:intro",
            "@brief": "One-Shot timer"
        },
        "random": {
            "@name": "random:intro",
            "@brief": "Random number generation"
        },
        "parser": {
            "@name": "parser:intro",
            "@brief": "String parsing"
        },
        "aes": {
            "@name": "aes:intro",
            "@brief": "Encrypt & decrypt messages"
        },
        "hmac": {
            "@name": "hmac:intro",
            "@brief": "Sign & verify messages"
        },
        "Reader": {
            "@name": "Reader:intro",
            "@brief": "Binary buffer reader"
        },
        "Writer": {
            "@name": "Writer:intro",
            "@brief": "Binary buffer writer"
        },
        "UDP": {
            "@name": "UDP:intro",
            "@brief": "Send & receive network packets",
            "@description": "Used to send and\/or receive IP packets over the UDP protocol.",
            "@example": "#include <napc.h>\n\nnapc__UDPSocket sock;\nint counter = 0;\n\nvoid napc_setup(const char *p) {\n\tif (!napc_env_isEthernetAvailable()) {\n\t\tNAPC_PANIC(\"Sorry, ethernet is not available :(\\n\");\n\t}\n\n\t\/\/ initialize ethernet\n\tnapc_eth_setIPAddress(\"192.168.0.20\");\n\tnapc_eth_setMACAddress(\"aa:bb:cc:dd:ee:ff\");\n\n\t\/\/ open udp socket on port 2020\n\tsock = napc_UDP_createSocket(2020);\n\n\tnapc_printf(\"Opened UDP socket on port 2020\\n\");\n}\n\nbool napc_loop(napc_time uptime) {\n\tchar packet_buffer[512];\n\n\tnapc__Buffer buffer = napc_Buffer_create(packet_buffer, sizeof(packet_buffer));\n\tnapc__IPv4Participant source_ip;\n\n\tif (napc_UDP_receive(sock, &source_ip, &buffer)) {\n\t\tnapc_printf(\n\t\t\t\"Received %\" NAPC_SIZE_PRINTF \" bytes from %s:%u\\n\",\n\t\t\tbuffer.size,\n\t\t\tsource_ip.addr,\n\t\t\tsource_ip.port\n\t\t);\n\n\t\tnapc_UDP_send(sock, source_ip, buffer.data, buffer.size);\n\t}\n\n\treturn true;\n}"
        },
        "fs": {
            "@name": "fs:intro",
            "@brief": "Write & read files"
        }
    },
    "build_constants": {
        "GIT_BRANCH": "dev",
        "GIT_HEAD_HASH": "a53cccf0b9a66c1213d22e7843a47550704d2ad4",
        "RELEASE_VERSION": "dev-a53cccf",
        "ARDUINO_FRIENDLY_NAME": "libnapc-dev",
        "ARDUINO_FRIENDLY_VERSION": "0.0.1",
        "ARDUINO_FRIENDLY_URL": "https:\/\/nightly.libnapc.nap.software\/",
        "BUILD_DATE": "07.04.2022 03:06:53"
    },
    "release_files": [
        {
            "name": "libnapc-aarch64.a",
            "checksum": "a8272bcc94d0ffadf28eae3e566033f07a53e0624662a23ef38a87db0dcf499d"
        },
        {
            "name": "libnapc-x86_64.a",
            "checksum": "6dd5cbbc72a869d03226831dcf57ec8bbb08989c0453db28e4590e6b51482328"
        },
        {
            "name": "napc.h",
            "checksum": "eab777d965cb6851c63ee4bc2b818905ff2f48047bbb85f7d228c271781d7670"
        },
        {
            "name": "libnapc-arduino.zip",
            "checksum": "382f34962d13fe80f71f476289316f69ade96b1bfc5bf8583b640cbc748c947b"
        }
    ]
}
