#if !defined(NAPC_RAND_SOURCE_h)
	#define NAPC_RAND_SOURCE_h

	#include <libnapc.h>

	/*!
	 * @name napc_getRandomBitSources
	 * @brief Get source ids for randomness.
	 * @version 1.0.0
	 * @description
	 * Return a list of all available sources of randomness.
	 * 
	 * The end of the list is indicated with `-1` (which is not a valid source identifier).
	 * @return Returns a list of integers that can be passed as a second parameter to `napc_getRandomBit`.
	 * @notes
	 * Since this function is hardware dependent, its output also is dependent on the target hardware.
	 * @changelog 1.0.0 17.02.2022 initial version
	 * @example
	 * const int *sources = napc_getRandomBitSources();
	 * 
	 * for (int i = 0; sources[i] >= 0; ++i) {
	 *     napc_printf("Source identifier %d\n", sources[i]);
	 * }
	 */
	const int *napc_getRandomBitSources(void) NAPC_FN_WARNUNUSED_RET();

	/*!
	 * @name napc_getRandomBit
	 * @brief Create a random bit value.
	 * @version 1.0.0
	 * @param out Location to put random bit into.
	 * @param source Source to get the randomness from. See `napc_getRandomBitSources`.
	 * @return Returns `true` if `out` contains a new randomly generated bit.
	 * @warning
	 * It's not advised to call this function directly, use `napc_getRandomByte` for generating a random byte instead.
	 * @warning
	 * `out` remains UNMODIFIED if function returned `false`.
	 * @changelog 1.0.0 17.02.2022 initial version
	 * @example
	 * napc_u8 out;
	 * 
	 * if (napc_getRandomBit(&out)) {
	 *     // do something with `out`
	 * }
	 */
	bool napc_getRandomBit(bool *out, int source) NAPC_FN_WARNUNUSED_RET();

	/*!
	 * @name napc_getRandomByte
	 * @brief Create a random byte.
	 * @version 1.0.0
	 * @param out Location to put random byte into.
	 * @return Returns `true` if `out` contains a new randomly generated byte.
	 * @warning
	 * `out` remains UNMODIFIED if function returned `false`.
	 * @changelog 1.0.0 17.02.2022 initial version
	 * @example
	 * napc_u8 out;
	 * 
	 * if (napc_getRandomByte(&out)) {
	 *     // do something with `out`
	 * }
	 */
	bool napc_getRandomByte(napc_u8 *out) NAPC_FN_WARNUNUSED_RET();
#endif
